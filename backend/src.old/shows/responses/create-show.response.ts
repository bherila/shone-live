import { ApiProperty } from "@nestjs/swagger";
import { CreateSimpleProductResponse } from "../../simple-products/responses/create-simple-product.response";

import { CreateFileResponse } from "../../files/responses/create-file.response";
import { UserResponse } from "../../users/responses/user.response";
import { Show } from "../entities/show.entity";

export class CreateShowResponse {
  // @ApiProperty() tags are needed on all attributes for OpenAPI
  // otherwise OpenAPI won't get these in autogenerated response
  @ApiProperty({
    description: `our id in our database`,
    example: `b644cec4-0487-4f6f-bac1-c80059a2a4b0`,
    type: "UUID",
  })
  public readonly id: string;

  @ApiProperty({
    description: `the room information from agora`,
    example: `{
  "appId": "f488493d1886435f963dfb3d95984fd4",
  "roomName": "Rockyâ€™s Live",
  "roomId": "101940351140368384",
  "channelName": "30e73c1c99aa8b4c35657778d1056eab",
  "thumbnail": "https://twitter.com/explore/test.png",
  "muteAllChat": 0,
  "state": 1,
  "type": 5,
  "currentUsers": 1,
  "owner": {
    "uid": 1380625893,
    "userId": "101244212439158784"
  }
}`,
    type: "Stringified JSON",
    required: false,
  })
  public readonly agora_room?: string;

  @ApiProperty({
    description: `the display description for customers,
    this should entice users to check out the show`,
    example: `The coolest host with the coolest products will show you
    everything you've been dying to purchase this season`,
    required: true,
  })
  public readonly description: string;

  @ApiProperty({
    description: `show name`,
    example: `The Ski Show - New Ski Bindings Edition`,
    required: true,
  })
  public name: string;

  @ApiProperty({
    description:
      `whether the show is scheduled ` +
      `or just created and went live at the same time`,
  })
  public readonly scheduled?: boolean;

  @ApiProperty({
    description:
      `the time that the show is scheduled to start at` +
      `(it's a datetime, format https://en.wikipedia.org/wiki/ISO_8601)` +
      `required unless the show is immediately live, ie has a start (time)`,
    example: `2020-11-22T20:39:12+00:00`,
    required: false,
  })
  public readonly scheduled_start?: Date;

  @ApiProperty({
    description:
      `the time that the show is scheduled to end at` +
      `(it's a datetime, format https://en.wikipedia.org/wiki/ISO_8601)` +
      `required unless the show is immediately live, ie has a start (time)`,
    example: `2020-11-22T21:39:12+00:00`,
    required: false,
  })
  public readonly scheduled_end?: Date;

  @ApiProperty({
    description:
      `time the show actually started at. ` +
      `if a show is not scheduled in advance` +
      `this field must be passed to indicate that ` +
      `the show is being created at the same time it is going live. ` +
      `if the show is being created prior to going live then` +
      `this must not be passed during creation; ` +
      `however, in that case this must be passed at the time ` +
      `the show actually starts`,
    example: `2020-11-22T20:39:12+00:00`,
    required: false,
  })
  public readonly start?: Date;

  @ApiProperty({
    description:
      `time the show actually ended at` +
      `this must be passed at the time the show ends`,
    example: `2020-11-22T20:39:12+00:00`,
    required: false,
  })
  readonly end?: Date;

  @ApiProperty({
    description: `the user who created the show`,
    type: UserResponse,
    required: true,
  })
  public readonly user: UserResponse;

  @ApiProperty({
    description: `the video and photo preview for the show are here`,
    isArray: true,
    type: CreateFileResponse,
    required: false,
  })
  public readonly files?: CreateFileResponse[];

  @ApiProperty({
    description: `the simpleProducts associated with the show
    for sale during the show`,
    isArray: true,
    type: CreateSimpleProductResponse,
    required: false,
  })
  public readonly simpleProducts?: CreateSimpleProductResponse[];

  constructor(show: Show) {
    this.id = show.id;
    this.agora_room = show.agora_room;
    this.description = show.description;
    this.name = show.name;
    this.scheduled = show.scheduled;
    this.scheduled_start = show.scheduled_start;
    this.scheduled_end = show.scheduled_end;
    this.start = show.start;
    this.end = show.end;
    this.files = show.files?.map((file) => new CreateFileResponse(file));
    this.user = new UserResponse(show.user);
    this.simpleProducts = show.simpleProducts?.map(
      (simpleProduct) => new CreateSimpleProductResponse(simpleProduct)
    );
  }
}
